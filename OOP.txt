Object Oriented Programming in Python
-------------------------------
OOP is a programming paradigm that uses techniques like
 * Encapsulation
 * Polymorphism
 * Inheritance
 * Abstraction
for application development.

Encapsulation:
 Encapsulation is binding operations (code) 
 and attributes (data) of an entity into 
 one respective unit.

 Example:
 class Stack
 {
  //data
  int data[];
  int top;

  //code
  void push(int) {...}
  int pop() {...}

 }//Stack

 FYI : Making a class is implementing encapsulation.


Polymorphism:
 Polymorphism is the ability of an object
 to perform a task in multiple ways.


 class Billing
 {
  void payment(card) {code 1}  
  void payment(cash) {code 2}  
  void payment(loyaltypoints) {code 3} 
 }


Inheritance:
 Inheritance is a mechanism that allows
 creation of derived entities from existing
 ones.
 The derived entites extend the behaviour.


 class Clock
 {
  int h,m,s;

  void setTime() {...}
  void displayTime() {...}
  void updateTime() {...}
 }

 class AlarmClock inherits Clock
 {
  //extensions 
  int ah, am;
  void setRingtone() {...}
  void playRingtone() {...}
  void snooze() {...} 
 }


Abstraction
 Abstraction is exposing operations of an
 object while hiding its implementation and
 sub operations.

 The user of the object knows what an
 object does but doesnt know how it does.


 class ShopKeeper
 {
  public sellCandy()
  {
    openJar();
    selectCandyColorwise();
    ...
  } 

  private openJar(){ ... }
  private selectCandyColorwise() {...}

 }

 By abstraction implementation 
 of objects behaviour may be 
 felexibly modified/upgraded. 

